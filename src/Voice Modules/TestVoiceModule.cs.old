using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Net;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using DSharpPlus.CommandsNext;
using DSharpPlus.CommandsNext.Attributes;
using DSharpPlus.Entities;
using DSharpPlus.VoiceNext;
using Hexa.Attributes;
using Hexa.Helpers;
using Newtonsoft.Json.Linq;

namespace Hexa.Modules.Voice
{
    // [Hidden, Disabled]
    public class ExampleVoiceCommands : BaseCommandModule
    {
        [Command("join"), Description("Joins a voice channel.")]
        [Category(SettingsManager.HexaSetting.VoiceCategory)]
        public async Task Join(CommandContext ctx, DiscordChannel chn = null)
        {
            // check whether VNext is enabled
            var vnext = ctx.Client.GetVoiceNext();
            if (vnext == null)
            {
                // not enabled
                await ctx.RespondAsync("VNext is not enabled or configured.");
                return;
            }

            // check whether we aren't already connected
            var vnc = vnext.GetConnection(ctx.Guild);
            if (vnc != null)
            {
                // already connected
                await ctx.RespondAsync("Already connected in this guild.");
                return;
            }

            // get member's voice state
            var vstat = ctx.Member?.VoiceState;
            if (vstat?.Channel == null && chn == null)
            {
                // they did not specify a channel and are not in one
                await ctx.RespondAsync("You are not in a voice channel.");
                return;
            }

            // channel not specified, use user's
            if (chn == null)
                chn = vstat.Channel;

            // connect
            vnc = await vnext.ConnectAsync(chn);
            await ctx.RespondAsync($"Connected to `{chn.Name}`");
        }

        [Command("leave"), Description("Leaves a voice channel.")]
        [Category(SettingsManager.HexaSetting.VoiceCategory)]
        public async Task Leave(CommandContext ctx)
        {
            // check whether VNext is enabled
            var vnext = ctx.Client.GetVoiceNext();
            if (vnext == null)
            {
                // not enabled
                await ctx.RespondAsync("VNext is not enabled or configured.");
                return;
            }

            // check whether we are connected
            var vnc = vnext.GetConnection(ctx.Guild);
            if (vnc == null)
            {
                // not connected
                await ctx.RespondAsync("Not connected in this guild.");
                return;
            }

            // disconnect
            vnc.Disconnect();
            await ctx.RespondAsync("Disconnected");
        }

        [Command("play"), Description("Plays an audio file.")]
        [Category(SettingsManager.HexaSetting.VoiceCategory)]
        public async Task Play(CommandContext ctx, [RemainingText, Description("Full path to the file to play.")] string filename)
        {
            await YoutubePlayer.Play(ctx, filename);
        }

        public static class YoutubePlayer
        {

            public static async Task<IEnumerable<string>> GetResults(string query)
            {
                var url = $"https://www.youtube.com/results?search_query={Uri.EscapeUriString(query)}";

                var httpRequest = (HttpWebRequest)WebRequest.Create(url);

                var httpResponse = (HttpWebResponse)httpRequest.GetResponse();
                using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
                {
                    var result = streamReader.ReadToEnd();
                    var matches = Regex.Matches(result, "\"videoId\":\"(.{11})\"");
                    return matches.Select(x => x.Groups?[1]?.Value).Distinct();
                }
            }
            public static async Task<IEnumerable<string>> DownloadVideo(string query)
            {

                // Console.WriteLine(httpResponse.StatusCode);
            }

            public static async Task Play(CommandContext ctx, string query)
            {
                var vnext = ctx.Client.GetVoiceNext();
                // check whether we aren't already connected
                var vnc = vnext.GetConnection(ctx.Guild);
                if (vnc == null)
                {
                    var vstat = ctx.Member?.VoiceState;
                    if (vstat?.Channel == null)
                    {
                        await ctx.RespondAsync("You are not in a voice channel.");
                        return;
                    }
                    vnc = await vnext.ConnectAsync(vstat.Channel);
                }
                while (vnc.IsPlaying)
                    await vnc.WaitForPlaybackFinishAsync();
                // try
                // {
                await vnc.SendSpeakingAsync(true);
                await DownloadVideo(query);
                var psi = new ProcessStartInfo
                {
                    FileName = "ffmpeg",
                    Arguments = $@"-i ""{query}"" -ac 2 -f s16le -ar 48000 pipe:1 -loglevel quiet",
                    RedirectStandardOutput = true,
                    UseShellExecute = false
                };
                var ffmpeg = Process.Start(psi);
                var ffout = ffmpeg.StandardOutput.BaseStream;

                var txStream = vnc.GetTransmitSink();
                await ffout.CopyToAsync(txStream);
                await txStream.FlushAsync();
                await vnc.WaitForPlaybackFinishAsync();
                // }
                // catch (Exception ex) { exc = ex; }
                // finally
                // {
                await vnc.SendSpeakingAsync(false);
                await ctx.Message.RespondAsync($"Finished playing `{query}`");
                // }

                // if (exc != null)
                //     await ctx.RespondAsync($"An exception occured during playback: `{exc.GetType()}: {exc.Message}`");
            }
        }
    }
}